@model ProjectManagementAPl.ViewModels.BlogModel

@{
    ViewData["Title"] = "Create";
}
@section styles{
    <style>
        .ck-editor__editable_inline {
            height: 400px;
        }

        #form_createBlog {
            width: 250%;
        }
    </style>
}

<div class="container">
    <h1>Create</h1>

    <!-- toasts -->
    <div class="toast-container">
    </div>

    <h4>BlogModel</h4>
    <hr />

    <div class="row">
        <div class="col-md-4">
            <form asp-action="Create" id="form_createBlog" role="form" enctype="multipart/form-data">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group">
                    <label asp-for="title_blog" class="control-label"></label>
                    <input asp-for="title_blog" class="form-control" />
                    <span asp-validation-for="title_blog" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="content_blog" class="control-label"></label>
                    <textarea  id="content_blog" name="content_blog" rows="10" class="form-control"></textarea>
                    @*<span asp-validation-for="content_blog" class="text-danger"></span>*@
                </div>

                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>

    <div>
        <a asp-action="Index">Back to List</a>
    </div>
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/ckeditor5-custom/build/ckeditor.js"></script>
    <script>
        $(document).ready(function () {

            class MyUploadAdapter {
                constructor(loader) {
                    // The file loader instance to use during the upload. It sounds scary but do not
                    // worry — the loader will be passed into the adapter later on in this guide.
                    this.loader = loader;
                }

                // Starts the upload process.
                upload() {
                    return this.loader.file
                        .then(file => new Promise((resolve, reject) => {
                            this._initRequest();
                            this._initListeners(resolve, reject, file);
                            this._sendRequest(file);
                        }));
                }

                // Aborts the upload process.
                abort() {
                    if (this.xhr) {
                        this.xhr.abort();
                    }
                }

                // Initializes the XMLHttpRequest object using the URL passed to the constructor.
                _initRequest() {
                    const xhr = this.xhr = new XMLHttpRequest();

                    // Note that your request may look different. It is up to you and your editor
                    // integration to choose the right communication channel. This example uses
                    // a POST request with JSON as a data structure but your configuration
                    // could be different.
                    xhr.open('POST', '@Url.Action("UploadImage", "Blog")', true);
                    xhr.responseType = 'json';
                }

                // Initializes XMLHttpRequest listeners.
                _initListeners(resolve, reject, file) {
                    const xhr = this.xhr;
                    const loader = this.loader;
                    const genericErrorText = `Couldn't upload file: ${file.name}.`;

                    xhr.addEventListener('error', () => reject(genericErrorText));
                    xhr.addEventListener('abort', () => reject());
                    xhr.addEventListener('load', () => {
                        const response = xhr.response;

                        // This example assumes the XHR server's "response" object will come with
                        // an "error" which has its own "message" that can be passed to reject()
                        // in the upload promise.
                        //
                        // Your integration may handle upload errors in a different way so make sure
                        // it is done properly. The reject() function must be called when the upload fails.
                        if (!response || response.error) {
                            return reject(response && response.error ? response.error.message : genericErrorText);
                        }

                        // If the upload is successful, resolve the upload promise with an object containing
                        // at least the "default" URL, pointing to the image on the server.
                        // This URL will be used to display the image in the content. Learn more in the
                        // UploadAdapter#upload documentation.
                        resolve({
                            default: response.url
                        });
                    });

                    // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                    // properties which are used e.g. to display the upload progress bar in the editor
                    // user interface.
                    if (xhr.upload) {
                        xhr.upload.addEventListener('progress', evt => {
                            if (evt.lengthComputable) {
                                loader.uploadTotal = evt.total;
                                loader.uploaded = evt.loaded;
                            }
                        });
                    }
                }

                // Prepares the data and sends the request.
                _sendRequest(file) {
                    // Prepare the form data.
                    const data = new FormData();

                    data.append('upload', file);

                    // Important note: This is the right place to implement security mechanisms
                    // like authentication and CSRF protection. For instance, you can use
                    // XMLHttpRequest.setRequestHeader() to set the request headers containing
                    // the CSRF token generated earlier by your application.

                    // Send the request.
                    this.xhr.send(data);
                }


            }

            function MyCustomUploadAdapterPlugin(editor) {
                editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                    // Configure the URL to the upload script in your back-end here!
                    return new MyUploadAdapter(loader);
                };
            }



            //-----------
            ClassicEditor
                .create(document.querySelector('#content_blog'), {
                    extraPlugins: [MyCustomUploadAdapterPlugin],

                })
                .catch(error => {
                    console.error(error);
                });

            $('form').each(function () {
                if ($(this).data('validator'))
                    $(this).data('validator').settings.ignore = ".ck *";
            });

        });

        
        
    </script>
    <script>
    // Define the showSuccessToast function globally
        function showErrorToast(message) {
            var toastContainer = $(".toast-container");

            var toast = $('<div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="true" data-delay="5000"></div>');
            var toastHeader = $('<div class="toast-header bg-danger text-white"></div>');
            var toastTitle = $('<strong class="me-auto"></strong>').text("Error");
            var closeButton = $('<button type="button" class="ml-2 mb-1 mt-1 close" data-dismiss="toast" aria-label="Close"></button>');
            closeButton.append('<span aria-hidden="true">&times;</span>');

            var toastBody = $('<div class="toast-body"></div>').text(message);

            toastHeader.append(toastTitle);
            toastHeader.append(closeButton);
            toast.append(toastHeader);
            toast.append(toastBody);

            // Position the toast container in the upper right corner
            toastContainer.css("position", "fixed");
            toastContainer.css("top", "1rem");
            toastContainer.css("right", "1rem");

            // Set flexbox properties to align the toasts vertically
            toastContainer.css("display", "flex");
            toastContainer.css("flex-direction", "column-reverse");
            toastContainer.css("align-items", "flex-end");

            // Add a margin between stacked toasts
            toastContainer.children().each(function () {
                $(this).css("margin-bottom", "10px");
            });

            toastContainer.append(toast);

            // Show the toast
            toast.toast("show");
        }

        @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
        {
            <text>
                showErrorToast('@Html.Raw(ViewBag.ErrorMessage)');
            </text>
        }
    </script>
}
